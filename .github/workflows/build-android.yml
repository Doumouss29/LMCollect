name: Build LM Collect (Android)

on:
  workflow_dispatch:
  push:
    branches: ["rebrand/lm-collect"]

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (repo + submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Définir métadonnées appli
        run: |
          echo "APP_VERSION=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$(( $(date +%s) / 60 ))" >> $GITHUB_ENV
          echo "PKG_ID=com.doumouss29.lmcollect" >> $GITHUB_ENV
          echo "APP_NAME=LM Collect" >> $GITHUB_ENV

      - name: Générer icônes Android depuis JPEG
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p platform/android/app/src/main/res
          for d in mipmap-mdpi mipmap-hdpi mipmap-xhdpi mipmap-xxhdpi mipmap-xxxhdpi; do
            mkdir -p "platform/android/app/src/main/res/$d"
          done
          declare -A S=( [mipmap-mdpi]=48 [mipmap-hdpi]=72 [mipmap-xhdpi]=96 [mipmap-xxhdpi]=144 [mipmap-xxxhdpi]=192 )
          for dir in "${!S[@]}"; do
            convert "branding/lmcollect/appicon_source.jpeg" \
              -resize ${S[$dir]}x${S[$dir]}^ -gravity center -extent ${S[$dir]}x${S[$dir]} \
              "platform/android/app/src/main/res/$dir/ic_launcher.png"
          done

      - name: Splash (fond bleu)
        run: |
          mkdir -p platform/android/app/src/main/res/drawable platform/android/app/src/main/res/values
          cat > platform/android/app/src/main/res/drawable/splash_background.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
            <item android:drawable="@color/splash_color"/>
          </layer-list>
          XML
          cat > platform/android/app/src/main/res/values/colors.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <color name="splash_color">#1E88E5</color>
          </resources>
          XML

      # --- Nettoyage des warnings chown du runner ---
      - name: Neutraliser chown (éviter les warnings)
        run: |
          mkdir -p .ci-bin
          printf '%s\n' '#!/usr/bin/env bash' 'command chown "$@" 2>/dev/null || true' > .ci-bin/chown
          chmod +x .ci-bin/chown
          echo "$PWD/.ci-bin" >> $GITHUB_PATH

      # --- Build Android via le wrapper QField, exécuté SUR LE RUNNER ---
      - name: Build Android (wrapper QField sur host)
        run: |
          set -euo pipefail
          docker --version
          # Le wrapper s'attend à /io monté : on le prépare côté host
          sudo mkdir -p /io && sudo chown "$USER":"$USER" /io
          # S'assurer que le script est exécutable et enlever -it (pas de TTY sur Actions)
          chmod +x scripts/docker-build-wrapper.sh
          sed -i 's/ -it / /g; s/ -it$/ /g' scripts/docker-build-wrapper.sh
          # Lancer le wrapper (il va lui-même construire son image docker interne puis builder)
          ./scripts/docker-build-wrapper.sh

      - name: Trouver l’APK produit
        id: apk
        run: |
          set -euo pipefail
          APK="$(find . -type f -name "*.apk" | head -n1 || true)"
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          if [ -z "$APK" ]; then
            echo "Aucun APK trouvé"; exit 1
          fi
          echo "APK trouvé: $APK"

      # Déterminer si tous les secrets de signature sont bien présents
      - name: Vérifier présence des secrets de signature
        id: secrets
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ] && \
             [ -n "${ANDROID_KEY_ALIAS:-}" ] && \
             [ -n "${ANDROID_KEYSTORE_PASSWORD:-}" ] && \
             [ -n "${ANDROID_KEY_PASSWORD:-}" ]; then
            echo "has=true" >> $GITHUB_OUTPUT
          else
            echo "has=false" >> $GITHUB_OUTPUT
          fi

      - name: Décoder le keystore
        if: ${{ steps.apk.outputs.apk != '' && steps.secrets.outputs.has == 'true' }}
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Signer & Aligner l’APK (si secrets dispo)
        if: ${{ steps.apk.outputs.apk != '' && steps.secrets.outputs.has == 'true' }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y zipalign apksigner
          zipalign -p 4 "${{ steps.apk.outputs.apk }}" lmcollect-aligned.apk
          apksigner sign \
            --ks keystore.jks \
            --ks-key-alias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.ANDROID_KEY_PASSWORD }}" \
            --out lmcollect-signed.apk lmcollect-aligned.apk

      - name: Publier l’APK (signé si possible, sinon brut)
        uses: actions/upload-artifact@v4
        with:
          name: lm-collect-apk
          path: |
            lmcollect-signed.apk
            ${{ steps.apk.outputs.apk }}
          if-no-files-found: error
