name: Build LM Collect (Android)

on:
  workflow_dispatch:
  push:
    branches: ["rebrand/lm-collect"]

concurrency:
  group: build-android-${{ github.ref }}-${{ github.sha }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
      - name: Checkout (repo + submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Définir les versions / app infos
        run: |
          echo "APP_VERSION=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$(( $(date +%s) / 60 ))" >> $GITHUB_ENV
          echo "PKG_ID=com.doumouss29.lmcollect" >> $GITHUB_ENV
          echo "APP_NAME=LM Collect" >> $GITHUB_ENV

      - name: Générer icônes Android
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p platform/android/app/src/main/res
          for d in mipmap-mdpi mipmap-hdpi mipmap-xhdpi mipmap-xxhdpi mipmap-xxxhdpi; do
            mkdir -p platform/android/app/src/main/res/$d
          done
          declare -A S=( [mipmap-mdpi]=48 [mipmap-hdpi]=72 [mipmap-xhdpi]=96 [mipmap-xxhdpi]=144 [mipmap-xxxhdpi]=192 )
          for dir in "${!S[@]}"; do
            convert "branding/lmcollect/appicon_source.jpeg" \
              -resize ${S[$dir]}x${S[$dir]}^ -gravity center -extent ${S[$dir]}x${S[$dir]} \
              "platform/android/app/src/main/res/$dir/ic_launcher.png"
          done

      - name: Splash (fond bleu)
        run: |
          mkdir -p platform/android/app/src/main/res/drawable platform/android/app/src/main/res/values
          cat > platform/android/app/src/main/res/drawable/splash_background.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
            <item android:drawable="@color/splash_color"/>
          </layer-list>
          XML
          cat > platform/android/app/src/main/res/values/colors.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <color name="splash_color">#1E88E5</color>
          </resources>
          XML

      - name: Build Android via QField SDK (Docker)
        run: |
          set -euo pipefail
          echo "Docker:"
          docker version

          if [ ! -x scripts/docker-build-wrapper.sh ]; then
            echo "❌ scripts/docker-build-wrapper.sh introuvable ou non exécutable."
            echo "Contenu du dossier scripts/ :"
            ls -la scripts || true
            exit 1
          fi

          docker pull opengisch/qfield-sdk:latest

          # Pas de TTY (-t) pour éviter 'the input device is not a TTY'
          docker run --rm -i \
            -v "$PWD":/usr/src/qfield \
            -w /usr/src/qfield \
            -e APP_VERSION -e APP_VERSION_CODE \
            -e PKG_ID -e APP_NAME \
            opengisch/qfield-sdk:latest \
            bash -lc './scripts/docker-build-wrapper.sh'

      - name: Trouver l’APK produit
        id: apk
        run: |
          APK=$(find . -type f -name "*.apk" | head -n1 || true)
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          if [ -z "$APK" ]; then
            echo "❌ Aucun APK trouvé après le build."
            exit 1
          fi
          echo "✅ APK trouvé: $APK"

      - name: Décoder le keystore (skippé si secrets manquants)
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -z "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "ℹ️ Pas de ANDROID_KEYSTORE_BASE64 → on saute le décodage (build non signé)."
            exit 0
          fi
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          ls -l keystore.jks || true

      - name: Signer & Aligner l’APK (skippé si secrets manquants)
        env:
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          if [ -z "${ANDROID_KEY_ALIAS:-}" ] || [ -z "${ANDROID_KEYSTORE_PASSWORD:-}" ] || [ -z "${ANDROID_KEY_PASSWORD:-}" ] || [ ! -f keystore.jks ]; then
            echo "ℹ️ Secrets de signature incomplets ou keystore absent → on publiera l'APK non signé."
            exit 0
          fi
          sudo apt-get update && sudo apt-get install -y zipalign apksigner
          zipalign -p 4 "${{ steps.apk.outputs.apk }}" lmcollect-aligned.apk
          apksigner sign \
            --ks keystore.jks \
            --ks-key-alias "$ANDROID_KEY_ALIAS" \
            --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" \
            --key-pass pass:"$ANDROID_KEY_PASSWORD" \
            --out lmcollect-signed.apk lmcollect-aligned.apk
          echo "✅ APK signé: lmcollect-signed.apk"

      - name: Publier l’APK (signé si présent, sinon brut)
        uses: actions/upload-artifact@v4
        with:
          name: lm-collect-apk
          path: |
            lmcollect-signed.apk
            ${{ steps.apk.outputs.apk }}
          if-no-files-found: warn
