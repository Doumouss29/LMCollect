name: Build LM Collect (Android)

on:
  workflow_dispatch:
  push:
    branches: ["rebrand/lm-collect"]

concurrency:
  group: build-android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (repo + submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: App metadata
        run: |
          echo "APP_VERSION=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$(( $(date +%s) / 60 ))" >> $GITHUB_ENV
          echo "PKG_ID=com.doumouss29.lmcollect" >> $GITHUB_ENV
          echo "APP_NAME=LM Collect" >> $GITHUB_ENV

      - name: G√©n√©rer ic√¥nes
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p platform/android/app/src/main/res
          for d in mipmap-mdpi mipmap-hdpi mipmap-xhdpi mipmap-xxhdpi mipmap-xxxhdpi; do
            mkdir -p platform/android/app/src/main/res/$d
          done
          declare -A S=( [mipmap-mdpi]=48 [mipmap-hdpi]=72 [mipmap-xhdpi]=96 [mipmap-xxhdpi]=144 [mipmap-xxxhdpi]=192 )
          for dir in "${!S[@]}"; do
            convert "branding/lmcollect/appicon_source.jpeg" \
              -resize ${S[$dir]}x${S[$dir]}^ -gravity center -extent ${S[$dir]}x${S[$dir]} \
              "platform/android/app/src/main/res/$dir/ic_launcher.png"
          done

      - name: Splash (fond)
        run: |
          mkdir -p platform/android/app/src/main/res/drawable platform/android/app/src/main/res/values
          cat > platform/android/app/src/main/res/drawable/splash_background.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
            <item android:drawable="@color/splash_color"/>
          </layer-list>
          XML
          cat > platform/android/app/src/main/res/values/colors.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <color name="splash_color">#1E88E5</color>
          </resources>
          XML

      # üîß Pr√©parer et lancer le wrapper QField sur le host (pas dans un conteneur)
      - name: Build Android (wrapper QField sur host)
        run: |
          set -euo pipefail

          # 1) S'assurer que Docker est pr√™t (pr√©sent par d√©faut sur GitHub runner)
          docker --version

          # 2) Pr√©parer /io attendu par le wrapper
          sudo mkdir -p /io
          sudo chown "$USER":"$USER" /io

          # 3) Virer '-it' du wrapper (√©vite "the input device is not a TTY")
          chmod +x scripts/docker-build-wrapper.sh
          sed -i 's/ -it / /g; s/ -it$/ /g' scripts/docker-build-wrapper.sh

          # 4) Exporter quelques variables utiles (optionnelles)
          export APP_VERSION="${APP_VERSION}"
          export APP_VERSION_CODE="${APP_VERSION_CODE}"
          export PKG_ID="${PKG_ID}"
          export APP_NAME="${APP_NAME}"

          # 5) Lancer le wrapper (il va pull l'image opengisch/qfield-sdk et builder dedans)
          ./scripts/docker-build-wrapper.sh

      - name: Trouver l‚ÄôAPK
        id: apk
        run: |
          APK=$(find . -type f -name "*.apk" | head -n1 || true)
          echo "apk=$APK" >> "$GITHUB_OUTPUT"
          test -n "$APK" && echo "‚úÖ APK: $APK" || (echo "‚ùå Aucun APK trouv√©"; exit 1)

      # üîè Signature : on check les secrets √† l'ex√©cution (pas dans if:)
      - name: Signer & aligner (si secrets pr√©sents)
        if: ${{ steps.apk.outputs.apk }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${ANDROID_KEYSTORE_BASE64:-}" ] || [ -z "${ANDROID_KEY_ALIAS:-}" ] || [ -z "${ANDROID_KEYSTORE_PASSWORD:-}" ] || [ -z "${ANDROID_KEY_PASSWORD:-}" ]; then
            echo "‚ÑπÔ∏è Secrets absents ‚Üí on publie l‚ÄôAPK non sign√©."
            cp "${{ steps.apk.outputs.apk }}" lmcollect-unsigned.apk
            exit 0
          fi

          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          sudo apt-get update && sudo apt-get install -y zipalign apksigner
          zipalign -p 4 "${{ steps.apk.outputs.apk }}" lmcollect-aligned.apk
          apksigner sign \
            --ks keystore.jks \
            --ks-key-alias "$ANDROID_KEY_ALIAS" \
            --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" \
            --key-pass pass:"$ANDROID_KEY_PASSWORD" \
            --out lmcollect-signed.apk lmcollect-aligned.apk

      - name: Publier APK sign√© (si pr√©sent)
        if: ${{ hashFiles('lmcollect-signed.apk') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: lm-collect-apk
          path: lmcollect-signed.apk

      - name: Publier APK non sign√© (fallback)
        if: ${{ hashFiles('lmcollect-signed.apk') == '' && steps.apk.outputs.apk }}
        uses: actions/upload-artifact@v4
        with:
          name: lm-collect-apk-unsigned
          path: ${{ steps.apk.outputs.apk }}
